#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import ast
import argparse
import logging
logging.basicConfig()
logger = logging.getLogger()

from sage.env import SAGE_ROOT
from sage.misc.banner import banner


class NotebookSageNB(object):

    def cmdline2argspec(self, cmdline_args):
        """
        Convert command line arguments to Python argspec

        AKA the crappy copy of argparse. Only here for the legacy
        notebook, do not use.

        INPUT:
    
        - ``cmdline_args`` -- list of string.
    
        OUTPUT:
    
        A python argspec: A pair consisting of a tuple and a dict.

        EXAMPLES::

            sage: 1+1
        """
        args = []
        kwds = dict()
        for x in cmdline_args:
            logger.info('Parsing %s', x)
            if '=' in x:
                key, value = x.split('=', 2)
                logger.debug('keyword argument %s = %s', key, value)
                value = ast.literal_eval(value)
                kwds[key] = value
            else:
                logger.debug('positional argument %s', x)
                value = ast.literal_eval(x)
                args.append(value)
        return tuple(args), kwds

    def __init__(self, argv):
        self.args, self.kwds = self.cmdline2argspec(argv)
        logger.info('notebook positional arguments = %s', self.args)
        logger.info('notebook keyword arguments = %s', self.kwds)
        from sagenb.notebook.notebook_object import notebook
        notebook(*self.args, **self.kwds)
    

class NotebookIPython(object):

    def __init__(self, argv):
        self._make_notebook_dir()
        from sage.repl.notebook_ipy import SageNotebookApp
        app = SageNotebookApp.instance()
        app.initialize(argv)
        app.start()

    def _make_notebook_dir(self):
        # The IPython notebook directory must exist
        from sage.repl.notebook_ipy import NOTEBOOK_DIR
        if not os.path.exists(NOTEBOOK_DIR):
            os.makedirs(NOTEBOOK_DIR)


description = \
"""
The Sage Notebook Launcher
"""

notebook_launcher = {
    'default': NotebookSageNB,   # change this to change the default
    'sagenb': NotebookSageNB,
    'ipython': NotebookIPython,
} 

notebook_names = ', '.join(notebook_launcher.keys())


def make_parser():
    """
    The main parser handling the selection of the notebook.

    Any arguments that are not parsed here are supposed to be handled
    by the notebook implementation.
    """
    parser = argparse.ArgumentParser(description=description, add_help=False)
    parser.add_argument('-h', '--help',
                        dest='option_help', action='store_true',
                        default=False, 
                        help='show this help message and exit')
    parser.add_argument('--log', dest='log', default=None,
                        help='one of [DEBUG, INFO, ERROR, WARNING, CRITICAL]')
    parser.add_argument('--notebook',    # long style
                        '-n',            # short style
                        '-notebook',     # wtf style, we can't decide (legacy support)
                        dest='notebook', type=str, nargs='?', const='default',
                        help='The notebook to run [{0}]'.format(notebook_names))
    return parser


if __name__ == '__main__':
    parser = make_parser()
    args, unknown = parser.parse_known_args(sys.argv[1:])
    if args.log is not None:
        import logging
        level = getattr(logging, args.log.upper())
        logger.setLevel(level=level)
    logger.info('Main parser got arguments %s', args)
    logger.info('Passing on to notebook implementation: %s', unknown)

    if args.option_help:
        parser.print_help()
        sys.exit(0)

    try:
        launcher = notebook_launcher[args.notebook]
    except KeyError:
        logger.critical('unknown notebook: %s', args.notebook)
        print('Error, notebook must be one of {0} but got {1}'.
              format(notebook_names, args.notebook))
        sys.exit(1)

    banner()
    print("Please wait while the Sage Notebook server starts...")
    launcher(unknown)


