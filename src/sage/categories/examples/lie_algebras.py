r"""
Examples of a Lie algebra
"""
#*****************************************************************************
#  Copyright (C) 2014 Travis Scrimshaw <tscrim at ucdavis.edu>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#                  http://www.gnu.org/licenses/
#*****************************************************************************

from sage.misc.cachefunc import cached_method
from sage.sets.family import Family
from sage.categories.all import LieAlgebras
from sage.structure.parent import Parent
from sage.structure.element import ModuleElement
from sage.structure.unique_representation import UniqueRepresentation

class LieAlgebraFromAssociative(Parent, UniqueRepresentation):
    r"""
    An example of a Lie algebra: a Lie algebra from an associative algebra.

    This class illustrates a minimal implementation of a Lie algebra.
    """
    @staticmethod
    def __classcall_private__(cls, gens):
        """
        Normalize input to ensure a unique representation.
        """
        return super(LieAlgebraFromAssociative, cls).__classcall__(cls, tuple(gens))

    def __init__(self, gens):
        """
        EXAMPLES::

            sage: A = LieAlgebras(QQ).example(); A
            An example of a Lie algebra: the abelian Lie algebra on the generators (B['a'], B['b'], B['c']) over Rational Field
            sage: TestSuite(A).run()
        """
        if not gens:
            raise ValueError("need at least one generator")
        self._gens = gens
        self._A = gens[0].parent()
        R = self._A.base_ring()
        Parent.__init__(self, base=R, category=LieAlgebras(R))

    def _repr_(self):
        """
        EXAMPLES::

            sage: LieAlgebras(QQ).example()
            An example of a Lie algebra: the abelian Lie algebra on the generators (B['a'], B['b'], B['c']) over Rational Field
        """
        return "An example of a Lie algebra: the Lie algebra from an" \
               " associative algebra generated by {} over {}".format(
                    self._gens, self.base_ring())

    def _element_constructor_(self, value):
        """
        Return an element of ``self``.
        """
        return self.element_class(self, self._A(value))

    def zero(self):
        """
        Return the element 0.
        """
        return self.element_class(self, self._A.zero())

    def lie_algebra_generators(self):
        """
        Return the generators of ``self`` as a Lie algebra.

        EXAMPLES::

            sage: L = LieAlgebras(QQ).example()
            sage: L.lie_algebra_generators()
            (B['a'], B['b'], B['c'])
        """
        return Family([self.element_class(self, g) for g in self._gens])

    class Element(ModuleElement):
        def __init__(self, parent, value):
            """
            Initialize ``self``.
            """
            self._value = value
            ModuleElement.__init__(self, parent)

        def _repr_(self):
            """
            Return a string representation of ``self``.
            """
            return repr(self._value)

        def __eq__(self, rhs):
            """
            Check equality.
            """
            if not isinstance(rhs, LieAlgebraFromAssociative.Element):
                return False
            return self.parent() == rhs.parent() and self._value == rhs._value

        def __nonzero__(self):
            """
            Check non-zero.
            """
            return not self._value

        def _add_(self, rhs):
            """
            Add ``self`` to ``rhs``.
            """
            return self.__class__(self.parent(), self._value + rhs._value)

        def _bracket_(self, rhs):
            """
            Return the Lie bracket ``[self, rhs]``.
            """
            return self.__class__(self.parent(), self._value * rhs._value - rhs._value * self._value)

        def _mul_(self, rhs):
            r"""
            When multiplying elements, lift up to the associative algebra.
            """
            return self._value * rhs._value

Example = LieAlgebraFromAssociative

