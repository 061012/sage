r"""
Examples of a Lie algebra
"""
#*****************************************************************************
#  Copyright (C) 2014 Travis Scrimshaw <tscrim at ucdavis.edu>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#                  http://www.gnu.org/licenses/
#*****************************************************************************

from sage.misc.cachefunc import cached_method
from sage.sets.family import Family
from sage.categories.all import LieAlgebras
from sage.structure.parent import Parent
from sage.algebras.lie_algebras.lie_algebra_element import LieAlgebraElementWrapper
from sage.structure.unique_representation import UniqueRepresentation

class LieAlgebraFromAssociative(Parent, UniqueRepresentation):
    r"""
    An example of a Lie algebra: a Lie algebra from an associative algebra.

    This class illustrates a minimal implementation of a Lie algebra.
    """
    @staticmethod
    def __classcall_private__(cls, gens):
        """
        Normalize input to ensure a unique representation.

        EXAMPLES::

            sage: S3 = SymmetricGroupAlgebra(QQ, 3)
            sage: L1 = LieAlgebras(QQ).example()
            sage: gens = list(S3.algebra_generators())
            sage: L2 = LieAlgebras(QQ).example(gens)
            sage: L1 is L2
            True
        """
        return super(LieAlgebraFromAssociative, cls).__classcall__(cls, tuple(gens))

    def __init__(self, gens):
        """
        EXAMPLES::

            sage: L = LieAlgebras(QQ).example()
            sage: TestSuite(L).run()
        """
        if not gens:
            raise ValueError("need at least one generator")
        self._gens = gens
        self._A = gens[0].parent()
        R = self._A.base_ring()
        Parent.__init__(self, base=R, category=LieAlgebras(R))

    def _repr_(self):
        """
        EXAMPLES::

            sage: LieAlgebras(QQ).example()
            An example of a Lie algebra: the Lie algebra from the associative algebra
             Symmetric group algebra of order 3 over Rational Field
             generated by ([2, 1, 3], [2, 3, 1])
        """
        return "An example of a Lie algebra: the Lie algebra from the" \
               " associative algebra {} generated by {}".format(
                    self._A, self._gens)

    def _element_constructor_(self, value):
        """
        Return an element of ``self``.

        EXAMPLES::

            sage: S3 = SymmetricGroupAlgebra(ZZ, 3)
            sage: gens = S3.algebra_generators()
            sage: L = LieAlgebras(QQ).example()
            sage: L(3*gens[0] + gens[1])
            3*[2, 1, 3] + [2, 3, 1]
        """
        return self.element_class(self, self._A(value))

    def zero(self):
        """
        Return the element 0.

        EXAMPLES::

            sage: L = LieAlgebras(QQ).example()
            sage: L.zero()
            0
        """
        return self.element_class(self, self._A.zero())

    def lie_algebra_generators(self):
        """
        Return the generators of ``self`` as a Lie algebra.

        EXAMPLES::

            sage: L = LieAlgebras(QQ).example()
            sage: L.lie_algebra_generators()
            Family ([2, 1, 3], [2, 3, 1])
        """
        return Family([self.element_class(self, g) for g in self._gens])

    class Element(LieAlgebraElementWrapper):
        def _bracket_(self, rhs):
            """
            Return the Lie bracket ``[self, rhs]``.

            EXAMPLES::

                sage: L = LieAlgebras(QQ).example()
                sage: x,y = L.lie_algebra_generators()
                sage: elt = 2*x - y
                sage: elt.bracket(elt)
                0
                sage: elt.bracket(x)
                -[1, 3, 2] + [3, 2, 1]
                sage: elt2 = x.bracket(y) + x
                sage: elt.bracket(elt2)
                -2*[2, 1, 3] + 4*[2, 3, 1] - 4*[3, 1, 2] + 2*[3, 2, 1]
            """
            return self.__class__(self.parent(), self.value * rhs.value - rhs.value * self.value)

Example = LieAlgebraFromAssociative

