diff -ru src/configure c/configure
--- src/configure	2014-01-14 16:08:23.699226873 +0100
+++ c/configure	2014-01-14 16:51:14.410458952 +0100
@@ -756,6 +756,7 @@
 with_sysroot
 enable_libtool_lock
 enable_ntl_checks
+enable_hardware_specific_code
 enable_sse2
 enable_pclmul
 with_compile_warnings
@@ -1403,6 +1404,9 @@
   --enable-dependency-tracking   do not reject slow dependency extractors
   --disable-libtool-lock  avoid locking (might break parallel builds)
   --enable-ntl-checks     Turn on ntl checks
+  --enable-hardware-specific-code
+                          Turn on all cpu-dependent optimized code (default is
+                          yes)
   --enable-sse2           Turn on sse-2 code (default is yes)
   --enable-pclmul         Turn on pclmul code (default is yes)
 
@@ -11513,6 +11517,15 @@
   enableval=$enable_ntl_checks;
 fi
 
+
+# Check whether --enable-hardware-specific-code was given.
+if test "${enable_hardware_specific_code+set}" = set; then :
+  enableval=$enable_hardware_specific_code;
+else
+  enable_hardware_specific_code=yes
+fi
+
+
 # Check whether --enable-sse2 was given.
 if test "${enable_sse2+set}" = set; then :
   enableval=$enable_sse2;
@@ -16338,6 +16351,102 @@
 
 
 
+: ${ABI='default'}
+
+if test x$ABI != xdefault ; then
+
+
+    if test x$gf2x_cv_ulongbits = x ; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking the number of bits in an unsigned long" >&5
+$as_echo_n "checking the number of bits in an unsigned long... " >&6; }
+if ${gf2x_cv_ulongbits+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+
+        if test "$cross_compiling" = yes; then :
+
+            { $as_echo "$as_me:${as_lineno-$LINENO}: check skipped because of cross-compiling" >&5
+$as_echo "$as_me: check skipped because of cross-compiling" >&6;}
+            gf2x_cv_ulongbits=dontknow
+
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* We check wraparound rather than zero, because that's the only thing
+   the norm guarantees (C99) -- UINT_MAX isn't committed to being a power
+   of two */
+#include <stdio.h>
+int main() {
+    unsigned long x = 1UL;
+    unsigned long y;
+    FILE * f = fopen("conftest.out","w");
+    int i = 1;
+    for( ; ; i++) {
+        y = x << 1;
+        if (y < x) {
+            break;
+        }
+        x = y;
+    }
+    fprintf(f,"%d\n",i);
+    fclose(f);
+    return 0;
+}
+
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+
+            # see bug #15631 and autoconf manual about tr.
+            # detected=`cat conftest.out | tr -d -c 0-9`
+            detected=`cat conftest.out`
+            if test x$detected = x ; then
+                as_fn_error $? "test program failed" "$LINENO" 5
+            else
+                gf2x_cv_ulongbits=$detected
+            fi
+
+else
+
+            { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot compile/run test program
+See \`config.log' for more details" "$LINENO" 5; }
+
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_ulongbits" >&5
+$as_echo "$gf2x_cv_ulongbits" >&6; }
+    fi
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC and ABI=$ABI fit together" >&5
+$as_echo_n "checking whether $CC and ABI=$ABI fit together... " >&6; }
+    case x$gf2x_cv_ulongbits in
+        xdontknow) { $as_echo "$as_me:${as_lineno-$LINENO}: cannot tell (cross-compiling)" >&5
+$as_echo "$as_me: cannot tell (cross-compiling)" >&6;};;
+        x$ABI) { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; };;
+        *)   as_fn_error $? "no, $gf2x_cv_ulongbits-bit. Please provide appropriate \$CC variable" "$LINENO" 5;;
+    esac
+
+fi
+
+if test x$hwdir = x ; then
+ # Our _default_ setting for hwdir is to use 8*sizeof(ulong).
+ hwdir=generic$gf2x_wordsize
+
+ # Yet there are several situations in which we select another directory.
+ # This refined selection mechanism is impacted by the ABI= setting.
+ case "$target_cpu" in
+  # All 32-bit pentium patterns
+  i?86|pentium*|athlon|prescott)
+   if test x$enable_hardware_specific_code = xyes; then
+
  ac_save_CFLAGS=$CFLAGS
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC can compile and run sse-2 code" >&5
 $as_echo_n "checking whether $CC can compile and run sse-2 code... " >&6; }
@@ -16524,49 +16633,66 @@
 
  fi
 
+   fi
+   if test x$gf2x_cv_cc_supports_sse2 != xyes ; then
+    hwdir=x86_nosse2
+   else
+    hwdir=x86_sse2
+    # Maybe on some funny platform from hell, we could get i386 yet have a
+    # 64-bit cpu ?
+    if test x$ABI = x64 ; then
+     hwdir=x86_64
+    fi
+   fi
+   ;;
+  core2|opteron|x86_64|nocona|k10)
+   # Note: could set to something else if we have separate tuning files.
 
-
- ac_save_CFLAGS="$CFLAGS"
- { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC can compile pclmulqdq and if it is supported by the hardware" >&5
-$as_echo_n "checking whether $CC can compile pclmulqdq and if it is supported by the hardware... " >&6; }
-if ${gf2x_cv_cc_supports_pclmul+:} false; then :
+ ac_save_CFLAGS=$CFLAGS
+ { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC can compile and run sse-2 code" >&5
+$as_echo_n "checking whether $CC can compile and run sse-2 code... " >&6; }
+if ${gf2x_cv_cc_supports_sse2+:} false; then :
   $as_echo_n "(cached) " >&6
 else
 
-  gf2x_cv_cc_supports_pclmul=no
-  if test "x${enable_pclmul}" = xno ; then
-   echo $ECHO_N " disabled, "
+  gf2x_cv_cc_supports_sse2=no
+  if test "x${enable_sse2}" = xno ; then
+   echo $ECHO_N "explicitly disabled, "
   else
    if test "$cross_compiling" = yes; then :
-
-   echo $ECHO_N " cross-compiling, "
-   gf2x_cv_cc_supports_pclmul=no
-
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot run test program while cross compiling
+See \`config.log' for more details" "$LINENO" 5; }
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-#include <wmmintrin.h>
-#include <assert.h>
-int main() {
-assert(sizeof(unsigned long) == 8); /* assume 64-bit */
-typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
-__v2di xx, yy;
-__v2di_proxy zz;
-xx = (__v2di) { 23, 0 };
-yy = (__v2di) { 47, 0 };
-zz.s = _mm_clmulepi64_si128(xx, yy, 0);
-return zz.x[0] - 61;
+#include <emmintrin.h>
+__v2di x;       /* Our code currently uses these, but it should not */
+int main(int argc, char * argv) {
+     __m128i foo = _mm_setr_epi32(argc, argc + 1, argc + 2, argc + 3);
+     __m128i bar = _mm_setr_epi32(argc + 3, argc + 2, argc + 1, argc);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_slli_epi64(foo, 1);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_epi64(foo, 1);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_shuffle_epi32(foo, 78);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_si128(foo, 1);
+
+    return _mm_extract_epi16(foo, 0) & (argc - 1);
 }
 
 _ACEOF
 if ac_fn_c_try_run "$LINENO"; then :
 
-    gf2x_cv_cc_supports_pclmul=yes
+    gf2x_cv_cc_supports_sse2=yes
 
 else
 
-    CFLAGS="$ac_save_CFLAGS -mpclmul"
+    CFLAGS="$ac_save_CFLAGS -msse2"
     if test "$cross_compiling" = yes; then :
   { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
 $as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
@@ -16576,27 +16702,31 @@
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-#include <wmmintrin.h>
-#include <assert.h>
-int main() {
-assert(sizeof(unsigned long) == 8); /* assume 64-bit */
-typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
-__v2di xx, yy;
-__v2di_proxy zz;
-xx = (__v2di) { 23, 0 };
-yy = (__v2di) { 47, 0 };
-zz.s = _mm_clmulepi64_si128(xx, yy, 0);
-return zz.x[0] - 61;
+#include <emmintrin.h>
+__v2di x;       /* Our code currently uses these, but it should not */
+int main(int argc, char * argv) {
+     __m128i foo = _mm_setr_epi32(argc, argc + 1, argc + 2, argc + 3);
+     __m128i bar = _mm_setr_epi32(argc + 3, argc + 2, argc + 1, argc);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_slli_epi64(foo, 1);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_epi64(foo, 1);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_shuffle_epi32(foo, 78);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_si128(foo, 1);
+
+    return _mm_extract_epi16(foo, 0) & (argc - 1);
 }
 
 _ACEOF
 if ac_fn_c_try_run "$LINENO"; then :
 
-     gf2x_cv_cc_supports_pclmul="requires -mpclmul"
+     gf2x_cv_cc_supports_sse2="requires -msse2"
 
 else
 
-     gf2x_cv_cc_supports_pclmul=no
+     gf2x_cv_cc_supports_sse2=no
 
 fi
 rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
@@ -16612,65 +16742,73 @@
   fi
 
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cc_supports_pclmul" >&5
-$as_echo "$gf2x_cv_cc_supports_pclmul" >&6; }
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cc_supports_sse2" >&5
+$as_echo "$gf2x_cv_cc_supports_sse2" >&6; }
  ac_save_CPPFLAGS=$CPPFLAGS
- if test "$gf2x_cv_cc_supports_pclmul" = "requires -mpclmul" ;then
+ if test "$gf2x_cv_cc_supports_sse2" = "requires -msse2" ;then
   # Tweaking CFLAGS is often not enough.
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether -mpclmul is also needed by the preprocessor" >&5
-$as_echo_n "checking whether -mpclmul is also needed by the preprocessor... " >&6; }
-if ${gf2x_cv_cpp_requires_mpclmul_flag+:} false; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether -msse2 is also needed by the preprocessor" >&5
+$as_echo_n "checking whether -msse2 is also needed by the preprocessor... " >&6; }
+if ${gf2x_cv_cpp_requires_msse2_flag+:} false; then :
   $as_echo_n "(cached) " >&6
 else
 
    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-#include <wmmintrin.h>
-#include <assert.h>
-int main() {
-assert(sizeof(unsigned long) == 8); /* assume 64-bit */
-typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
-__v2di xx, yy;
-__v2di_proxy zz;
-xx = (__v2di) { 23, 0 };
-yy = (__v2di) { 47, 0 };
-zz.s = _mm_clmulepi64_si128(xx, yy, 0);
-return zz.x[0] - 61;
+#include <emmintrin.h>
+__v2di x;       /* Our code currently uses these, but it should not */
+int main(int argc, char * argv) {
+     __m128i foo = _mm_setr_epi32(argc, argc + 1, argc + 2, argc + 3);
+     __m128i bar = _mm_setr_epi32(argc + 3, argc + 2, argc + 1, argc);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_slli_epi64(foo, 1);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_epi64(foo, 1);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_shuffle_epi32(foo, 78);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_si128(foo, 1);
+
+    return _mm_extract_epi16(foo, 0) & (argc - 1);
 }
 
 _ACEOF
 if ac_fn_c_try_cpp "$LINENO"; then :
 
-    gf2x_cv_cpp_requires_mpclmul_flag=no
+    gf2x_cv_cpp_requires_msse2_flag=no
 
 else
 
-    CPPFLAGS="$ac_save_CPPFLAGS -mpclmul"
+    CPPFLAGS="$ac_save_CPPFLAGS -msse2"
     cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-#include <wmmintrin.h>
-#include <assert.h>
-int main() {
-assert(sizeof(unsigned long) == 8); /* assume 64-bit */
-typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
-__v2di xx, yy;
-__v2di_proxy zz;
-xx = (__v2di) { 23, 0 };
-yy = (__v2di) { 47, 0 };
-zz.s = _mm_clmulepi64_si128(xx, yy, 0);
-return zz.x[0] - 61;
-}
-
-_ACEOF
-if ac_fn_c_try_cpp "$LINENO"; then :
-
-    gf2x_cv_cpp_requires_mpclmul_flag=yes
-
+#include <emmintrin.h>
+__v2di x;       /* Our code currently uses these, but it should not */
+int main(int argc, char * argv) {
+     __m128i foo = _mm_setr_epi32(argc, argc + 1, argc + 2, argc + 3);
+     __m128i bar = _mm_setr_epi32(argc + 3, argc + 2, argc + 1, argc);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_slli_epi64(foo, 1);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_epi64(foo, 1);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_shuffle_epi32(foo, 78);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_si128(foo, 1);
+
+    return _mm_extract_epi16(foo, 0) & (argc - 1);
+}
+
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+    gf2x_cv_cpp_requires_msse2_flag=yes
+
 else
 
-     as_fn_error $? "Sorry, the preprocessor can't parse pclmul !" "$LINENO" 5
+     as_fn_error $? "Sorry, the preprocessor can't parse sse-2!" "$LINENO" 5
 
 fi
 rm -f conftest.err conftest.i conftest.$ac_ext
@@ -16679,85 +16817,96 @@
 rm -f conftest.err conftest.i conftest.$ac_ext
 
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cpp_requires_mpclmul_flag" >&5
-$as_echo "$gf2x_cv_cpp_requires_mpclmul_flag" >&6; }
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cpp_requires_msse2_flag" >&5
+$as_echo "$gf2x_cv_cpp_requires_msse2_flag" >&6; }
  fi
- CFLAGS="$ac_save_CFLAGS"
- CPPFLAGS="$ac_save_CPPFLAGS"
- if test "$gf2x_cv_cc_supports_pclmul" = "requires -mpclmul" ;then
-  CFLAGS="$CFLAGS -mpclmul"
+ CFLAGS=$ac_save_CFLAGS
+ CPPFLAGS=$ac_save_CPPFLAGS
+ if test "$gf2x_cv_cc_supports_sse2" = "requires -msse2" ;then
+  CFLAGS="$CFLAGS -msse2"
  fi
- if test "$gf2x_cv_cpp_requires_mpclmul_flag" = "yes" ; then
-  CPPFLAGS="$CPPFLAGS -mpclmul"
+ if test "$gf2x_cv_cpp_requires_msse2_flag" = "yes" ; then
+  CPPFLAGS="$CPPFLAGS -msse2"
  fi
- if test "$gf2x_cv_cc_supports_pclmul" != "no" ;then
+ if test "$gf2x_cv_cc_supports_sse2" != "no" ;then
 
-$as_echo "#define HAVE_PCLMUL_SUPPORT 1" >>confdefs.h
+$as_echo "#define HAVE_SSE2_SUPPORT 1" >>confdefs.h
 
  fi
 
+   if test x$enable_hardware_specific_code = xyes; then
 
-: ${ABI='default'}
-
-if test x$ABI != xdefault ; then
-
-
-    if test x$gf2x_cv_ulongbits = x ; then
-    { $as_echo "$as_me:${as_lineno-$LINENO}: checking the number of bits in an unsigned long" >&5
-$as_echo_n "checking the number of bits in an unsigned long... " >&6; }
-if ${gf2x_cv_ulongbits+:} false; then :
+ ac_save_CFLAGS="$CFLAGS"
+ { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC can compile pclmulqdq and if it is supported by the hardware" >&5
+$as_echo_n "checking whether $CC can compile pclmulqdq and if it is supported by the hardware... " >&6; }
+if ${gf2x_cv_cc_supports_pclmul+:} false; then :
   $as_echo_n "(cached) " >&6
 else
 
-        if test "$cross_compiling" = yes; then :
+  gf2x_cv_cc_supports_pclmul=no
+  if test "x${enable_pclmul}" = xno ; then
+   echo $ECHO_N " disabled, "
+  else
+   if test "$cross_compiling" = yes; then :
 
-            { $as_echo "$as_me:${as_lineno-$LINENO}: check skipped because of cross-compiling" >&5
-$as_echo "$as_me: check skipped because of cross-compiling" >&6;}
-            gf2x_cv_ulongbits=dontknow
+   echo $ECHO_N " cross-compiling, "
+   gf2x_cv_cc_supports_pclmul=no
 
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-/* We check wraparound rather than zero, because that's the only thing
-   the norm guarantees (C99) -- UINT_MAX isn't committed to being a power
-   of two */
-#include <stdio.h>
+#include <wmmintrin.h>
+#include <assert.h>
 int main() {
-    unsigned long x = 1UL;
-    unsigned long y;
-    FILE * f = fopen("conftest.out","w");
-    int i = 1;
-    for( ; ; i++) {
-        y = x << 1;
-        if (y < x) {
-            break;
-        }
-        x = y;
-    }
-    fprintf(f,"%d\n",i);
-    fclose(f);
-    return 0;
+assert(sizeof(unsigned long) == 8); /* assume 64-bit */
+typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
+__v2di xx, yy;
+__v2di_proxy zz;
+xx = (__v2di) { 23, 0 };
+yy = (__v2di) { 47, 0 };
+zz.s = _mm_clmulepi64_si128(xx, yy, 0);
+return zz.x[0] - 61;
 }
 
 _ACEOF
 if ac_fn_c_try_run "$LINENO"; then :
 
-            # see bug #15631 and autoconf manual about tr.
-            # detected=`cat conftest.out | tr -d -c 0-9`
-            detected=`cat conftest.out`
-            if test x$detected = x ; then
-                as_fn_error $? "test program failed" "$LINENO" 5
-            else
-                gf2x_cv_ulongbits=$detected
-            fi
+    gf2x_cv_cc_supports_pclmul=yes
 
 else
 
-            { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+    CFLAGS="$ac_save_CFLAGS -mpclmul"
+    if test "$cross_compiling" = yes; then :
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
 $as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot compile/run test program
+as_fn_error $? "cannot run test program while cross compiling
 See \`config.log' for more details" "$LINENO" 5; }
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <wmmintrin.h>
+#include <assert.h>
+int main() {
+assert(sizeof(unsigned long) == 8); /* assume 64-bit */
+typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
+__v2di xx, yy;
+__v2di_proxy zz;
+xx = (__v2di) { 23, 0 };
+yy = (__v2di) { 47, 0 };
+zz.s = _mm_clmulepi64_si128(xx, yy, 0);
+return zz.x[0] - 61;
+}
+
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+
+     gf2x_cv_cc_supports_pclmul="requires -mpclmul"
+
+else
+
+     gf2x_cv_cc_supports_pclmul=no
 
 fi
 rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
@@ -16766,45 +16915,99 @@
 
 
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_ulongbits" >&5
-$as_echo "$gf2x_cv_ulongbits" >&6; }
-    fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
 
-    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC and ABI=$ABI fit together" >&5
-$as_echo_n "checking whether $CC and ABI=$ABI fit together... " >&6; }
-    case x$gf2x_cv_ulongbits in
-        xdontknow) { $as_echo "$as_me:${as_lineno-$LINENO}: cannot tell (cross-compiling)" >&5
-$as_echo "$as_me: cannot tell (cross-compiling)" >&6;};;
-        x$ABI) { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
-$as_echo "yes" >&6; };;
-        *)   as_fn_error $? "no, $gf2x_cv_ulongbits-bit. Please provide appropriate \$CC variable" "$LINENO" 5;;
-    esac
+  fi
 
 fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cc_supports_pclmul" >&5
+$as_echo "$gf2x_cv_cc_supports_pclmul" >&6; }
+ ac_save_CPPFLAGS=$CPPFLAGS
+ if test "$gf2x_cv_cc_supports_pclmul" = "requires -mpclmul" ;then
+  # Tweaking CFLAGS is often not enough.
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether -mpclmul is also needed by the preprocessor" >&5
+$as_echo_n "checking whether -mpclmul is also needed by the preprocessor... " >&6; }
+if ${gf2x_cv_cpp_requires_mpclmul_flag+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
 
-if test x$hwdir = x ; then
- # Our _default_ setting for hwdir is to use 8*sizeof(ulong).
- hwdir=generic$gf2x_wordsize
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <wmmintrin.h>
+#include <assert.h>
+int main() {
+assert(sizeof(unsigned long) == 8); /* assume 64-bit */
+typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
+__v2di xx, yy;
+__v2di_proxy zz;
+xx = (__v2di) { 23, 0 };
+yy = (__v2di) { 47, 0 };
+zz.s = _mm_clmulepi64_si128(xx, yy, 0);
+return zz.x[0] - 61;
+}
+
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+    gf2x_cv_cpp_requires_mpclmul_flag=no
+
+else
+
+    CPPFLAGS="$ac_save_CPPFLAGS -mpclmul"
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <wmmintrin.h>
+#include <assert.h>
+int main() {
+assert(sizeof(unsigned long) == 8); /* assume 64-bit */
+typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
+__v2di xx, yy;
+__v2di_proxy zz;
+xx = (__v2di) { 23, 0 };
+yy = (__v2di) { 47, 0 };
+zz.s = _mm_clmulepi64_si128(xx, yy, 0);
+return zz.x[0] - 61;
+}
+
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+    gf2x_cv_cpp_requires_mpclmul_flag=yes
+
+else
+
+     as_fn_error $? "Sorry, the preprocessor can't parse pclmul !" "$LINENO" 5
+
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cpp_requires_mpclmul_flag" >&5
+$as_echo "$gf2x_cv_cpp_requires_mpclmul_flag" >&6; }
+ fi
+ CFLAGS="$ac_save_CFLAGS"
+ CPPFLAGS="$ac_save_CPPFLAGS"
+ if test "$gf2x_cv_cc_supports_pclmul" = "requires -mpclmul" ;then
+  CFLAGS="$CFLAGS -mpclmul"
+ fi
+ if test "$gf2x_cv_cpp_requires_mpclmul_flag" = "yes" ; then
+  CPPFLAGS="$CPPFLAGS -mpclmul"
+ fi
+ if test "$gf2x_cv_cc_supports_pclmul" != "no" ;then
+
+$as_echo "#define HAVE_PCLMUL_SUPPORT 1" >>confdefs.h
+
+ fi
 
- # Yet there are several situations in which we select another directory.
- # This refined selection mechanism is impacted by the ABI= setting.
- case "$target_cpu" in
-  # All 32-bit pentium patterns
-  i?86|pentium*|athlon|prescott)
-   if test "$gf2x_cv_cc_supports_sse2" = "no" ; then
-    hwdir=x86_nosse2
-   else
-    hwdir=x86_sse2
-    # Maybe on some funny platform from hell, we could get i386 yet have a
-    # 64-bit cpu ?
-    if test x$ABI = x64 ; then
-     hwdir=x86_64
-    fi
    fi
-   ;;
-  core2|opteron|x86_64|nocona|k10)
-   # Note: could set to something else if we have separate tuning files.
-   if test "$gf2x_cv_cc_supports_pclmul" = "no" ; then
+   if test x$gf2x_cv_cc_supports_pclmul != xyes ; then
      hwdir=x86_64
    else
      hwdir=x86_64_pclmul
@@ -16892,6 +17095,364 @@
    ;;
  esac
 else
+
+ ac_save_CFLAGS=$CFLAGS
+ { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC can compile and run sse-2 code" >&5
+$as_echo_n "checking whether $CC can compile and run sse-2 code... " >&6; }
+if ${gf2x_cv_cc_supports_sse2+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+
+  gf2x_cv_cc_supports_sse2=no
+  if test "x${enable_sse2}" = xno ; then
+   echo $ECHO_N "explicitly disabled, "
+  else
+   if test "$cross_compiling" = yes; then :
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot run test program while cross compiling
+See \`config.log' for more details" "$LINENO" 5; }
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <emmintrin.h>
+__v2di x;       /* Our code currently uses these, but it should not */
+int main(int argc, char * argv) {
+     __m128i foo = _mm_setr_epi32(argc, argc + 1, argc + 2, argc + 3);
+     __m128i bar = _mm_setr_epi32(argc + 3, argc + 2, argc + 1, argc);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_slli_epi64(foo, 1);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_epi64(foo, 1);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_shuffle_epi32(foo, 78);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_si128(foo, 1);
+
+    return _mm_extract_epi16(foo, 0) & (argc - 1);
+}
+
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+
+    gf2x_cv_cc_supports_sse2=yes
+
+else
+
+    CFLAGS="$ac_save_CFLAGS -msse2"
+    if test "$cross_compiling" = yes; then :
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot run test program while cross compiling
+See \`config.log' for more details" "$LINENO" 5; }
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <emmintrin.h>
+__v2di x;       /* Our code currently uses these, but it should not */
+int main(int argc, char * argv) {
+     __m128i foo = _mm_setr_epi32(argc, argc + 1, argc + 2, argc + 3);
+     __m128i bar = _mm_setr_epi32(argc + 3, argc + 2, argc + 1, argc);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_slli_epi64(foo, 1);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_epi64(foo, 1);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_shuffle_epi32(foo, 78);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_si128(foo, 1);
+
+    return _mm_extract_epi16(foo, 0) & (argc - 1);
+}
+
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+
+     gf2x_cv_cc_supports_sse2="requires -msse2"
+
+else
+
+     gf2x_cv_cc_supports_sse2=no
+
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+  fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cc_supports_sse2" >&5
+$as_echo "$gf2x_cv_cc_supports_sse2" >&6; }
+ ac_save_CPPFLAGS=$CPPFLAGS
+ if test "$gf2x_cv_cc_supports_sse2" = "requires -msse2" ;then
+  # Tweaking CFLAGS is often not enough.
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether -msse2 is also needed by the preprocessor" >&5
+$as_echo_n "checking whether -msse2 is also needed by the preprocessor... " >&6; }
+if ${gf2x_cv_cpp_requires_msse2_flag+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <emmintrin.h>
+__v2di x;       /* Our code currently uses these, but it should not */
+int main(int argc, char * argv) {
+     __m128i foo = _mm_setr_epi32(argc, argc + 1, argc + 2, argc + 3);
+     __m128i bar = _mm_setr_epi32(argc + 3, argc + 2, argc + 1, argc);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_slli_epi64(foo, 1);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_epi64(foo, 1);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_shuffle_epi32(foo, 78);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_si128(foo, 1);
+
+    return _mm_extract_epi16(foo, 0) & (argc - 1);
+}
+
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+    gf2x_cv_cpp_requires_msse2_flag=no
+
+else
+
+    CPPFLAGS="$ac_save_CPPFLAGS -msse2"
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <emmintrin.h>
+__v2di x;       /* Our code currently uses these, but it should not */
+int main(int argc, char * argv) {
+     __m128i foo = _mm_setr_epi32(argc, argc + 1, argc + 2, argc + 3);
+     __m128i bar = _mm_setr_epi32(argc + 3, argc + 2, argc + 1, argc);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_slli_epi64(foo, 1);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_epi64(foo, 1);
+    foo = _mm_mullo_epi16(foo, bar);
+    foo = _mm_shuffle_epi32(foo, 78);
+    foo = _mm_xor_si128(bar, _mm_unpacklo_epi32 (foo, bar));
+    foo = _mm_srli_si128(foo, 1);
+
+    return _mm_extract_epi16(foo, 0) & (argc - 1);
+}
+
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+    gf2x_cv_cpp_requires_msse2_flag=yes
+
+else
+
+     as_fn_error $? "Sorry, the preprocessor can't parse sse-2!" "$LINENO" 5
+
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cpp_requires_msse2_flag" >&5
+$as_echo "$gf2x_cv_cpp_requires_msse2_flag" >&6; }
+ fi
+ CFLAGS=$ac_save_CFLAGS
+ CPPFLAGS=$ac_save_CPPFLAGS
+ if test "$gf2x_cv_cc_supports_sse2" = "requires -msse2" ;then
+  CFLAGS="$CFLAGS -msse2"
+ fi
+ if test "$gf2x_cv_cpp_requires_msse2_flag" = "yes" ; then
+  CPPFLAGS="$CPPFLAGS -msse2"
+ fi
+ if test "$gf2x_cv_cc_supports_sse2" != "no" ;then
+
+$as_echo "#define HAVE_SSE2_SUPPORT 1" >>confdefs.h
+
+ fi
+
+
+ ac_save_CFLAGS="$CFLAGS"
+ { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC can compile pclmulqdq and if it is supported by the hardware" >&5
+$as_echo_n "checking whether $CC can compile pclmulqdq and if it is supported by the hardware... " >&6; }
+if ${gf2x_cv_cc_supports_pclmul+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+
+  gf2x_cv_cc_supports_pclmul=no
+  if test "x${enable_pclmul}" = xno ; then
+   echo $ECHO_N " disabled, "
+  else
+   if test "$cross_compiling" = yes; then :
+
+   echo $ECHO_N " cross-compiling, "
+   gf2x_cv_cc_supports_pclmul=no
+
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <wmmintrin.h>
+#include <assert.h>
+int main() {
+assert(sizeof(unsigned long) == 8); /* assume 64-bit */
+typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
+__v2di xx, yy;
+__v2di_proxy zz;
+xx = (__v2di) { 23, 0 };
+yy = (__v2di) { 47, 0 };
+zz.s = _mm_clmulepi64_si128(xx, yy, 0);
+return zz.x[0] - 61;
+}
+
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+
+    gf2x_cv_cc_supports_pclmul=yes
+
+else
+
+    CFLAGS="$ac_save_CFLAGS -mpclmul"
+    if test "$cross_compiling" = yes; then :
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot run test program while cross compiling
+See \`config.log' for more details" "$LINENO" 5; }
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <wmmintrin.h>
+#include <assert.h>
+int main() {
+assert(sizeof(unsigned long) == 8); /* assume 64-bit */
+typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
+__v2di xx, yy;
+__v2di_proxy zz;
+xx = (__v2di) { 23, 0 };
+yy = (__v2di) { 47, 0 };
+zz.s = _mm_clmulepi64_si128(xx, yy, 0);
+return zz.x[0] - 61;
+}
+
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+
+     gf2x_cv_cc_supports_pclmul="requires -mpclmul"
+
+else
+
+     gf2x_cv_cc_supports_pclmul=no
+
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+  fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cc_supports_pclmul" >&5
+$as_echo "$gf2x_cv_cc_supports_pclmul" >&6; }
+ ac_save_CPPFLAGS=$CPPFLAGS
+ if test "$gf2x_cv_cc_supports_pclmul" = "requires -mpclmul" ;then
+  # Tweaking CFLAGS is often not enough.
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether -mpclmul is also needed by the preprocessor" >&5
+$as_echo_n "checking whether -mpclmul is also needed by the preprocessor... " >&6; }
+if ${gf2x_cv_cpp_requires_mpclmul_flag+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <wmmintrin.h>
+#include <assert.h>
+int main() {
+assert(sizeof(unsigned long) == 8); /* assume 64-bit */
+typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
+__v2di xx, yy;
+__v2di_proxy zz;
+xx = (__v2di) { 23, 0 };
+yy = (__v2di) { 47, 0 };
+zz.s = _mm_clmulepi64_si128(xx, yy, 0);
+return zz.x[0] - 61;
+}
+
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+    gf2x_cv_cpp_requires_mpclmul_flag=no
+
+else
+
+    CPPFLAGS="$ac_save_CPPFLAGS -mpclmul"
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <wmmintrin.h>
+#include <assert.h>
+int main() {
+assert(sizeof(unsigned long) == 8); /* assume 64-bit */
+typedef union { __v2di s; unsigned long x[2]; } __v2di_proxy;
+__v2di xx, yy;
+__v2di_proxy zz;
+xx = (__v2di) { 23, 0 };
+yy = (__v2di) { 47, 0 };
+zz.s = _mm_clmulepi64_si128(xx, yy, 0);
+return zz.x[0] - 61;
+}
+
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+    gf2x_cv_cpp_requires_mpclmul_flag=yes
+
+else
+
+     as_fn_error $? "Sorry, the preprocessor can't parse pclmul !" "$LINENO" 5
+
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gf2x_cv_cpp_requires_mpclmul_flag" >&5
+$as_echo "$gf2x_cv_cpp_requires_mpclmul_flag" >&6; }
+ fi
+ CFLAGS="$ac_save_CFLAGS"
+ CPPFLAGS="$ac_save_CPPFLAGS"
+ if test "$gf2x_cv_cc_supports_pclmul" = "requires -mpclmul" ;then
+  CFLAGS="$CFLAGS -mpclmul"
+ fi
+ if test "$gf2x_cv_cpp_requires_mpclmul_flag" = "yes" ; then
+  CPPFLAGS="$CPPFLAGS -mpclmul"
+ fi
+ if test "$gf2x_cv_cc_supports_pclmul" != "no" ;then
+
+$as_echo "#define HAVE_PCLMUL_SUPPORT 1" >>confdefs.h
+
+ fi
+
  { $as_echo "$as_me:${as_lineno-$LINENO}: Using supplied hwdir value $hwdir" >&5
 $as_echo "$as_me: Using supplied hwdir value $hwdir" >&6;}
 fi
diff -ru src/configure.ac c/configure.ac
--- src/configure.ac	2012-05-31 22:53:47.000000000 +0200
+++ c/configure.ac	2014-01-14 16:29:56.403050891 +0100
@@ -35,6 +35,12 @@
 AC_ARG_ENABLE([ntl-checks],
               [AS_HELP_STRING([--enable-ntl-checks],
                               [Turn on ntl checks])])
+
+AC_ARG_ENABLE([hardware-specific-code],
+              [AS_HELP_STRING([--enable-hardware-specific-code],
+                              [Turn on all cpu-dependent optimized code (default is yes)])],
+              [],[enable_hardware_specific_code=yes])
+
 AC_ARG_ENABLE([sse2],
               [AS_HELP_STRING([--enable-sse2],
                               [Turn on sse-2 code (default is yes)])])
@@ -62,9 +68,6 @@
 AC_SUBST([GF2X_WORDSIZE], [$gf2x_wordsize])
 
 
-CHECK_SSE2_SUPPORT()
-
-CHECK_PCLMUL_SUPPORT()
 
 : ${ABI='default'}
 
@@ -81,7 +84,10 @@
  case "$target_cpu" in
   # All 32-bit pentium patterns
   i?86|pentium*|athlon|prescott)
-   if test "$gf2x_cv_cc_supports_sse2" = "no" ; then
+   if test x$enable_hardware_specific_code = xyes; then
+     CHECK_SSE2_SUPPORT()
+   fi
+   if test x$gf2x_cv_cc_supports_sse2 != xyes ; then
     hwdir=x86_nosse2
    else
     hwdir=x86_sse2
@@ -94,7 +100,11 @@
    ;;
   core2|opteron|x86_64|nocona|k10)
    # Note: could set to something else if we have separate tuning files.
-   if test "$gf2x_cv_cc_supports_pclmul" = "no" ; then
+   CHECK_SSE2_SUPPORT()
+   if test x$enable_hardware_specific_code = xyes; then
+     CHECK_PCLMUL_SUPPORT()
+   fi
+   if test x$gf2x_cv_cc_supports_pclmul != xyes ; then
      hwdir=x86_64
    else
      hwdir=x86_64_pclmul
@@ -113,6 +123,8 @@
    ;;
  esac
 else
+ CHECK_SSE2_SUPPORT()
+ CHECK_PCLMUL_SUPPORT()
  AC_MSG_NOTICE([Using supplied hwdir value $hwdir])
 fi
 
