--- ../src/polybori-0.8.0/SConstruct	2011-09-07 22:25:22.000000000 +0200
+++ SConstruct	2011-10-09 23:47:57.930299775 +0200
@@ -126,7 +126,7 @@
     def DefaultBuild(arg):
         return arg
 
-defaultenv = Environment()
+defaultenv = Environment(ENV = os.environ)
 
 # See also: http://trac.sagemath.org/sage_trac/ticket/9872 and #6437
 def detect_linker(env):
@@ -318,7 +318,7 @@
 
 if defaultenv['PLATFORM'] == "sunos":  # forcing gcc, keeping linker
     def is_gcc():
-        compilerenv = Environment(options = opts)
+        compilerenv = Environment(ENV = os.environ, options = opts)
         return compilerenv['CC']  == 'gcc'
     
     if is_gcc():
@@ -327,7 +327,7 @@
             if arg in tools:
                 tools.remove(arg)
         tools +=  [ 'gcc', 'g++', 'ar']
-        defaultenv = Environment(tools=tools)
+        defaultenv = Environment(ENV = os.environ, tools=tools)
 
 for var in Split("""CCCOM CXXCOM SHCCCOM SHCXXCOM SHLINKCOM LINKCOM LINK SHLINK
 SHLIBPREFIX LIBPREFIX SHLIBSUFFIX LIBSUFFIX PLATFORM"""):
@@ -351,17 +351,10 @@
 
 tools +=  ["disttar", "doxygen"]
 
-# Get paths an related things from current environment
-# note: we cannot avoid those due to non-standard system setups
-getenv = dict()
-for key in ['PATH', 'HOME', 'LD_LIBRARY_PATH'] :
-    try:
-        getenv[key] = os.environ[key]
-    except KeyError:
-        pass
-
-
-env = Environment(ENV = getenv, options = opts, tools = tools, toolpath = '.')
+# Get paths and related things from current environment os.environ
+# note: We cannot avoid those due to non-standard system setups,
+#       also we do not know which variables are used in general
+env = Environment(ENV = os.environ, options = opts, tools = tools, toolpath = '.')
 
 if 'dump' in COMMAND_LINE_TARGETS:
   print env.Dump()
@@ -529,7 +522,8 @@
         }
         """  %  \
         ("%s", ''.join(["""
-        #if defined(__M4RI_HAVE_%(macro)s) || defined(HAVE_%(macro)s )
+        #if (defined(__M4RI_HAVE_%(macro)s) && (__M4RI_HAVE_%(macro)s)) || \
+          defined(HAVE_%(macro)s)
           printf("-m%(option)s ");
         #endif""" % \
         dict(macro=opt.replace('.','_').upper(), option=opt) for opt in \
