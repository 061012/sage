diff -ruN b/src/RNSop.c a/src/RNSop.c
--- b/src/RNSop.c	2006-11-23 22:25:23.000000000 +0100
+++ a/src/RNSop.c	2013-06-10 23:05:18.872404179 +0200
@@ -46,6 +46,7 @@
 
 
 #include "RNSop.h"
+#include "tinyatlas.h"
 
 /*
  *
diff -ruN b/src/memalloc.c a/src/memalloc.c
--- b/src/memalloc.c	2006-11-23 22:25:23.000000000 +0100
+++ a/src/memalloc.c	2013-06-10 23:05:18.872404179 +0200
@@ -48,13 +48,16 @@
 
 #include "error.h"
 #include "common.h"
+#include "stdio.h"
 
 void *
 xmalloc (size_t num)
 {
   void * new = malloc(num);
-  if (!new)
-    iml_fatal ("Memory exhausted");
+  if (!new) {
+    printf("%ul\n", num);
+    iml_fatal ("Memory exhausted in xmalloc");
+  }
   return new;
 }
 
@@ -65,8 +68,10 @@
   if (!p)
     return xmalloc(num);
   new = realloc(p, num);
-  if (!new)
-    iml_fatal("Memory exhausted");
+  if (!new) {
+    printf("%ul\n", num);
+    iml_fatal("Memory exhausted in xrealloc");
+  }
   return new;
 }
 
@@ -76,8 +81,10 @@
 {
 #if HAVE_CALLOC
   void * new = calloc(num, size);
-  if (!new)
-    iml_fatal("Memory exhausted");
+  if (!new) {
+    printf("%ul\n", num);
+    iml_fatal("Memory exhausted in xcalloc");
+  }
 #else
   void * new = xmalloc(num*size);
   bzero(new, num*size);
diff -ruN b/src/nullspace.c a/src/nullspace.c
--- b/src/nullspace.c	2006-11-26 04:34:23.000000000 +0100
+++ a/src/nullspace.c	2013-06-10 23:05:18.872404179 +0200
@@ -44,7 +44,6 @@
  *
  */
 
-
 #include "nullspace.h"
 
 /*
@@ -187,3 +186,143 @@
     return s;
 
 }
+
+/*
+ * Calling Sequence:
+ *   nullspaceLong(n, m, A, mp_N_pass)
+ *
+ * Summary: Compute the right nullspace of A. In this function A is a
+ * 1-dimensional mpz_t array.
+ *
+ * Input:  n: long, row dimension of A
+ *         m: long, column dimension of A
+ *         A: 1-dim mpz_t array length n*m, representing n x m matrix
+ *            in row major order
+ *
+ * Output:
+ *   - *mp_N_pass: points to a 1-dim mpz_t array of length m*s, where s is the 
+ *                dimension of the right nullspace of A
+ *   - the dimension s of the nullspace is returned
+ *
+ * Notes:
+ *   - The matrix A is represented by one-dimension array in row major order.
+ *   - Space for what mp_N_points to is allocated by this procedure: if the
+ *     nullspace is empty, mp_N_pass is set to NULL.
+ */
+
+long
+nullspaceMP(const long n, const long m, const mpz_t *A, mpz_t * *mp_N_pass)
+{
+    long i, j, k, r, s, *P, *rp, *Pt, *rpt, flag, temp;
+    double *DA;
+    FiniteField p, d = 1;
+    mpz_t *mp_B, *mp_N, mp_D, mp_t1, mp_t2, *C, mp_r;
+
+    mpz_init(mp_r);
+
+    P = XCALLOC(long, n + 1);
+    rp = XCALLOC(long, n + 1);
+    while (1) {
+	p = RandPrime(15, 19);
+	DA = XCALLOC(double, n * m);
+	for (i = 0; i < n * m; i++) {
+  	    mpz_mod_ui (mp_r, A[i], p);
+	    DA[i] = mpz_get_d(mp_r);
+	}
+	for (i = 0; i < n + 1; i++) {
+	    P[i] = i;
+	    rp[i] = 0;
+	}
+	d = 1;
+	RowEchelonTransform(p, DA, n, m, 1, 1, 0, 0, P, rp, &d);
+	XFREE(DA);
+	r = rp[0];
+	s = m - r;
+	if (s == 0) {
+	    *mp_N_pass = NULL;
+	} else if (r == 0) {
+	    flag = 1;
+	    for (i = 0; i < n * m; i++)
+		if ( mpz_cmp_si(A[i],0) )
+		    flag = 0;
+	    if (!flag)
+		continue;
+	    mp_N = XCALLOC(mpz_t, m * m);
+	    for (i = 0; i < m; i++) {
+		for (j = 0; j < m; j++)
+		    mpz_init_set_ui(mp_N[i * m + j], 0);
+		mpz_init_set_ui(mp_N[i * m + i], 1);
+	    }
+	    *mp_N_pass = mp_N;
+	} else {		/* r>0 and s>0 */
+
+	    Pt = revseq(r, n, P);
+	    rpt = revseq(r, m, rp);
+
+	    C = XCALLOC(mpz_t, r * r);
+	    for (i = 0; i < r; i++)
+		for (j = 0; j < r; j++)
+		    mpz_init_set(C[i * r + j], A[Pt[i] * m + rpt[j]]);
+
+	    mp_B = XCALLOC(mpz_t, r * s);
+	    for (i = 0; i < r; i++)
+		for (j = 0; j < s; j++)
+		    mpz_init_set(mp_B[i * s + j], A[Pt[i] * m + rpt[r + j]]);
+
+	    mpz_init(mp_D);
+	    mp_N = XCALLOC(mpz_t, m * s);
+	    for (i = 0; i < m * s; i++)
+		mpz_init(mp_N[i]);
+	    nonsingSolvLlhsMM(RightSolu, r, s, C, mp_B, mp_N, mp_D);
+	    mpz_neg(mp_D, mp_D);
+	    for (i = 0; i < s; i++)
+		mpz_set(mp_N[(r + i) * s + i], mp_D);
+
+	    XFREE(C);
+	    for (i = 0; i < r * s; i++)
+		mpz_clear(mp_B[i]);
+	    XFREE(mp_B);
+	    mpz_clear(mp_D);
+
+	    for (i = r; i >= 1; i--)
+		for (j = 0; j < s; j++)
+		    mpz_swap(mp_N[(i - 1) * s + j],
+			     mp_N[(rp[i] - 1) * s + j]);
+
+	    *mp_N_pass = mp_N;
+
+	    flag = 1;
+	    mpz_init(mp_t1);
+	    mpz_init(mp_t2);
+	    for (i = r; i < n && flag; i++) {
+		for (j = 0; j < s && flag; j++) {
+		    mpz_set_ui(mp_t2, 0);
+		    for (k = 0; k < m; k++) {
+			mpz_mul(mp_t1, mp_N[k * s + j],  A[Pt[i] * m + k]);
+			mpz_add(mp_t2, mp_t2, mp_t1);
+		    }
+		    if (mpz_sgn(mp_t2) != 0)
+			flag = 0;
+		}
+	    }
+	    mpz_clear(mp_t1);
+	    mpz_clear(mp_t2);
+
+	    XFREE(Pt);
+	    XFREE(rpt);
+
+	    if (!flag) {
+		for (i = 0; i < m * s; i++)
+		    mpz_clear(mp_N[i]);
+		XFREE(mp_N);
+		continue;
+	    }
+	}
+	break;
+    }
+    XFREE(P);
+    XFREE(rp);
+
+    return s;
+
+}
