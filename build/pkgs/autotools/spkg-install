#!/usr/bin/env bash

set -e

if [ -z "$SAGE_LOCAL" ]; then
    echo >&2 "SAGE_LOCAL undefined ... exiting"
    echo >&2 "Maybe run 'sage --sh'?"
    exit 1
fi

# Check that ls supports --sort=version
if ! ls --sort=version >/dev/null 2>/dev/null; then
    echo >&2 "This package requires ls from GNU coreutils,"
    echo >&2 "which supports ls --sort=version."
    exit 3
fi

SRC=`pwd`/src
BUILD=`pwd`/build

# Remove old versions
cd "$SAGE_LOCAL"
rm -rf autoconf-* automake-* libtool-*
cd bin
rm -f m4 help2man autoconf autoheader autom4te autoreconf automake aclocal libtool libtoolize


########################################################################
# Write a Makefile such that we can benefit from parallel building
########################################################################

mkdir -p "$BUILD"
exec 3>"$BUILD/Makefile"
echo >&3 "SRC = $SRC"
echo >&3 "SAGE_LOCAL = $SAGE_LOCAL"
echo >&3
echo >&3 'all: tools-all autoconf-all automake-all libtool-all'
echo >&3 -e '\n########################################################################\n'
echo >&3 'tools-all: $(SAGE_LOCAL)/bin/m4 $(SAGE_LOCAL)/bin/help2man'
echo >&3
echo >&3 '$(SAGE_LOCAL)/bin/m4: $(SRC)/m4-1.4.16'
echo >&3 -e '\tcd $< && ./configure --prefix="$(SAGE_LOCAL)" && $(MAKE) install'
echo >&3
echo >&3 '$(SAGE_LOCAL)/bin/help2man: $(SRC)/help2man-1.40.11'
echo >&3 -e '\tcd $< && ./configure --prefix="$(SAGE_LOCAL)" && $(MAKE) install'
echo >&3 -e '\n########################################################################\n'

# Write make rules for many versions of a package
# Usage: write_make_rules PACKAGE VERSION1 VERSION2 ...
write_make_rules() {
    # Package name (e.g. "autoconf")
    p=$1
    shift

    cd "$SRC/$p"
    mkdir "$BUILD/$p-installed"
    prevv=
    all="$p-all:"
    for v in $*
    do
        # Find out the correct tag for version $v
        tag=`git tag -l | grep -i -x -e "v$v" -e "release-$v" -e "$p-$v" | head -1`
        if [ -z "$tag" ]; then
            echo >&2 "Cannot find tag for $p-$v"
            exit 3
        fi
        echo >&3 "# Extract sources from git repository serially"
        echo >&3 "$p-$v/.tarball-version: $prevextract"
sed 's/^/\t/;' >&3 <<EOF
( cd \$(SRC)/$p && git archive --format=tar --prefix=$p-$v/ $tag ) | tar xf -
# If "configure" already exists, mark the directory as bootstrapped
cd $p-$v && \\
if [ -x configure ]; then touch .bootstrapped; fi
echo $v >\$@
EOF
        echo >&3
        prevextract="$p-$v/.tarball-version"

        echo >&3 "# Bootstrap (i.e. create configure,... by running autoreconf)"
        echo >&3 "$p-$v/.bootstrapped: $prevextract"
sed 's/^/\t/;' >&3 <<EOF
cd $p-$v && \\
    if [ -f .bootstrapped ]; then \\
        true; \\
    elif [ -x ./bootstrap ]; then \\
        bash -c 'set -e; source bootstrap'; \\
    elif [ -x ./bootstrap.sh ]; then \\
        bash -c 'set -e; source bootstrap.sh'; \\
    else \\
        autoreconf -i -I m4; \\
    fi
echo \$\$SPKG_PASS >\$@
EOF
        echo >&3

        echo >&3 "# Build"
        echo >&3 "$p-installed/$v: $p-$v/.bootstrapped" '$(SAGE_LOCAL)/bin/m4'
sed 's/^/\t/;' >&3 <<EOF
export AM_MAKEFLAGS="-j1";  # When recursing, only 1 job \\
cd $p-$v && \\
    if [ -f libtoolize.m4sh ]; then touch libtoolize.m4sh; fi && \\
    if [ -f autoheader.sh ]; then touch autoupdate.sh; fi && \\
    ./configure --prefix="\$(SAGE_LOCAL)/$p-$v" && \\
    \$(MAKE) install
echo \$\$SPKG_PASS >\$@
# Remove all files except for the .* files
[ "\$\$SAGE_KEEP_BUILT_SPKGS" = yes ] || rm -rf $p-$v/*
EOF
        echo >&3

        all="$all $p-installed/$v"
    done
    eval "${p}_latest='$v'"
    echo >&3 "$all"
    echo >&3 -e "\n########################################################################\n"
}

write_make_rules autoconf \
    2.13.rc1 2.57 2.58 2.59 2.60 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69

write_make_rules automake \
    1.9 1.9.1 1.9.2 1.9.3 1.9.4 1.9.5 1.9.6 1.10 1.10.1 1.10.2 1.10.3 \
    1.11 1.11.1 1.11.2 1.11.3 1.11.4 1.11.5 1.11.6 1.12 1.12.1 1.12.2

write_make_rules libtool \
    1.5.20 1.5.22 1.5.24 1.5.26 \
    2.2.4 2.2.6 2.2.6b 2.2.8 2.2.10 2.4 2.4.2

exec 3>&-


########################################################################
# Create temporary autofoo wrapper scripts in $BUILD.
########################################################################

# These run the latest version of autofoo installed by this spkg, and
# are only used during this build.
cd "$BUILD"

for prog in autoconf automake; do
cat <<EOF >$prog
#!/bin/sh
# Find newest version of $prog installed by this spkg
v=\`cd "$BUILD/$prog-installed" && ls -1 --sort=version | tail -1\`
if [ -z "\$v" ]; then
    echo >&2 "No version of $prog has been installed yet"
    exit 127
fi
exec "$SAGE_LOCAL/$prog-\$v/bin/\`basename \$0\`" "\$@"
EOF

chmod 0755 $prog
done

for prog in autoheader autom4te autoreconf; do
    ln -s autoconf $prog
done
ln -s automake aclocal

# Make sure these are in the PATH.
export PATH="`pwd`:$PATH"

########################################################################
# Do the actual build in multiple passes
########################################################################

# These multiple passes are a "brute-force" build: instead of true
# dependency checking, we simply try multiple times until we hopefully
# succeed in the end. The "-k" option means: continue after errors, so
# don't stop after the first error.
for SPKG_PASS in 1 2 3 4 5 6 final; do
    export SPKG_PASS
    echo "### autotools make pass $SPKG_PASS ###"
    if [ $SPKG_PASS = final ]; then
        # Final pass completely serial
        $MAKE -j1
    else
        if $MAKE -k; then
            break
        fi
    fi
done


########################################################################
# Install scripts in $SAGE_LOCAL/bin
########################################################################

cd "$SAGE_LOCAL/bin"

# We install scripts for autoconf,... based on the generic "autofoo" script
sed <"$SRC/../autofoo" >autoconf \
    "s/@AUTOFOO@/autoconf/; s/@AUTOFILES@/configure/; s/@DEFAULT_VERSION@/${autoconf_latest}/"
sed <"$SRC/../autofoo" >automake \
    "s/@AUTOFOO@/automake/; s/@AUTOFILES@/Makefile.in/; s/@DEFAULT_VERSION@/${automake_latest}/"
sed <"$SRC/../autofoo" >libtool \
    "s/@AUTOFOO@/libtool/; s/@AUTOFILES@/ltmain.sh/; s/@DEFAULT_VERSION@/${libtool_latest}/"

# Correct permissions
for prog in autoconf automake libtool; do
    chmod 0755 $prog
done

# Make symlinks
for prog in autoheader autom4te autoreconf autoscan; do
    ln -s autoconf $prog
done
ln -s automake aclocal
ln -s libtool libtoolize

# Make symlinks for some non-exact version matches
cd "$SAGE_LOCAL"
ln -s autoconf-2.13.rc1 autoconf-2.4
ln -s autoconf-2.13.rc1 autoconf-2.13
ln -s libtool-2.2.4 libtool-2.2.3a
ln -s libtool-2.2.8 libtool-2.2.7a


